"""
class to wrap a directory mounted using BaseMount and provide convenience functions to get at the metadata stored there

The currently supported metadata extraction uses the files created by BaseMount, but is limited to first class entities like projects and samples
it will fail (and throw an exception) when pointing at other directories. For some of these it's not really clear what the behaviour *should* be
eg. ~/BaseSpace/current_user/Projects/Sloths\ Test/Samples/
which is the owning directory for the "Sloths Test" samples. Should this be a directory of type "project" and id of the "Hyperion Test" project?
"""

import os
import json

REQUIRED_ENTRIES = set([ ".json", ".id", ".type" ])
PERMITTED_TYPES = set([ "sample", "project", "appsession" ])


class BaseMountInterfaceException(Exception):
    pass


class BaseMountInterface(object):
    def __init__(self, path):
        if path.endswith(os.sep):
            path = path[:-1]
        self.path = os.path.expanduser(path)
        self.id = None
        self.type = None
        self.access_token = None
        self.name = os.path.basename(path)
        if not self.__validate_basemount__():
            raise BaseMountInterfaceException("Path: %s does not seem to be a BaseMount entity path" % self.path)
        self.__resolve_details__()

    def __validate_basemount__(self):
        """
        Checks whether the chosen directory is a BaseMount directory
        """
        if not os.path.exists(self.path):
            return False
        if os.path.isdir(self.path):
            for required in REQUIRED_ENTRIES:
                required_path = os.path.join(self.path, required)
                if not os.path.exists(required_path):
                    return False
        return True

    def __resolve_details__(self):
        """
        pull the useful details out of the . files generated by BaseMount
        """
        if os.path.isdir(self.path):
            type_file = os.path.join(self.path, ".type")
            # the [:-1] is to strip of the trailing 's' that appears in types
            self.type = open(type_file).read().strip()[:-1]
        else:
            # this must mean the reference was to a file.
            # make sure it looks right!
            if "Files" not in self.path:
                raise BaseMountInterfaceException("Referring to a file not in the Files hierarchy!")
            self.type = "file"
        if self.type == "file":
            metadata_path = self.path.replace("Files", "Files.metadata")
            id_file = os.path.join(metadata_path, ".id")
            config_file = os.path.join(os.path.dirname(self.path), ".basemount", "Config.cfg")
        else:
            id_file = os.path.join(self.path, ".id")
            config_file = os.path.join(self.path, ".basemount", "Config.cfg")
        if os.path.isfile(config_file):
            # get the access token if we can
            self.access_token = self._get_access_token_from_config(config_file)
        self.id = open(id_file).read().strip()

    def __str__(self):
        return "%s : (%s) : (%s)" % (self.path, self.id, self.type)

    def _get_access_token_from_config(self, config_path):
        from configparser import SafeConfigParser, NoSectionError, NoOptionError
        config = SafeConfigParser()
        config.read(config_path)
        try:
            return config.get("DEFAULT", "accessToken")
        except NoOptionError as NoSectionError:
            raise BaseMountInterfaceException("malformed BaseMount config: %s" % config_path)




    def get_meta_data(self):
        try:
            with open(os.path.join(self.path, ".json")) as fh:
                md_str = fh.read()
                return json.loads(md_str)
        except IOError as e:
            raise BaseMountInterfaceException("could not read metadata file")
        except ValueError as e:
            raise BaseMountInterfaceException("could not parse json file")

"""
some test code; run:

python BaseMountInterface.py /path/mounted/by/basemount
to see some summary information
"""
if __name__ == "__main__":
    import sys
    path = sys.argv[1]
    mbi = BaseMountInterface(path)
    print(mbi)